// O'reilly PHP,MySQL :
    1- Objects
    2- Practical PHP
    3- Mastering mysql
    4- page 254 using locks
    5- Natural Join
    6- 

============================================================================================================

                                    -----------------------------
                                    <<<<<<<    General    >>>>>>>
                                    -----------------------------

- Local Host 127.0.0.1 >> "There is no place like 127.0.0.1"

- at pure PHP web pages we omit the closing tag of php script "?>"



- String Concatanation $s .= 'Bisho';  ==>  $s = $s . 'Bisho'; 

- Getting variable type
  # gettype() >> to get only the type of a variable.
  # var_dump() >> to get the type and the contents of a variable in details

- Resource datatype >> A variable that calls an external file or database out of the PHP code. It becomes a 
  resource variable when the connection succeeds but it becomes a False-Boolean variable when the connection fails.
  Example : $conn = mysqli('localhost', 'root', 'password', 'Mydb');
            $fp   = fopen('bisho.txt', 'r');


- Defining a constant >> define("CONSTANT NAME" , constant value or variable);
  Constants are global and used in website config.

- __FILE__ >> constant contains current file name
  __DIR__ >>  constant contains the current directory name
  __METHOD__, __FUCTION__,__NAMESPACE__.

- $a ==  $b is the equal operator. It returns true if only the two values are equal
  $a === $b is the identity operator. It returns true if the two values and data types are equal
  Example : $a = 5; $b = '5'; 
            $a == $b >> true .... but $a === $b >> false


- die(string status) === exit(). It stops the excution of the current script, excutes the destructors and   
  shutdown functions and if there is a status between parentheses It will be displayed. 

- Error control operator '@'. It turns off the errors in php statement.
  $fp = @fopen('Bisho.txt', 'r') or die('There is no file')
  note : '=' is higher precedence than 'or' so the interpreter tries to evaluate fopen() first. If it returned true it will leave the statement otherwise it will turn off the error and excute the after-or statement.
  It may be used with include(), fopen() and database connection

- header('REFRESH:;URL=bisho.php'); >> redirects to bisho.php after seconds. 

- header('Location: bisho.php'); >> redirects to a new location

- Using _END : _END; must be on a new line with no indentation and without spaces after it.
  echo <<<_END Some text .....
    Another text
_END;
  Advantges of using it :
    # Makes it very clear when debugging your program
    # When you wish to insert a variable within HTML you type it directly without need to reopn php tags.



============================================================================================================

                            -------------------------------------------
                            <<<<<<<    Variables & Operators    >>>>>>>
                            -------------------------------------------

- We can use variable functions. 
  Example : $x = 'hello'; $x(); >> This will trigger the function hello. It's like using hello();

- Super global variables     
    $GLOBALS >> An assocaiative array that has all variable names in the global scope of the scope as its keys and global values as its values
    $_SERVER >> An assocaiative array that has all server information needed
    $_GET, $_POST, $_FILES >> has all variable sent to script from these http headers
    More like $_ENV, $_SESSION, $_COOCKIE and $_REQUEST

- Global variables can't be accessed directly in function scope. It can be only accessed with 
  $GLOBALS['variable_name'].

- $_SERVER['REQUEST_METHOD'] >> GET, POST, PUT and so on.
  $_SERVER['SERVER_ADDR']    >> server ip. like 127.0.0.1.
  $_SERVER['SERVER_NAME']    >> server name. like localhost.
  $_SERVER['PHP_SELF']       >> returns the path to the php script.
  $_SERVER['QUERY_STRING']   >> returns the query string attached to the link requested .. ?name=bisho&...

- $_GET >> Array contains all parameters sent from the form to the current php script. It is shown in the link.

- $_POST >> Array contains all parameters sent from the form to the current php script. It is not shown in the 
            link parameters and is encrypted.

- $_REQUEST >> Can act like $_GET or $_POST.

- $_SESSION >> Remember your data when moving through the site .. it starts with session_start();
               

============================================================================================================

                                    ----------------------------
                                    <<<<<<<    Arrays    >>>>>>>
                                    ----------------------------

- We can add an element to the end of an indexed array with $array[] = 'Bisho' and 
                        to the end of associative array with $array[key] = value;

- We can overwrite a value of the array. $array[0] = 'Bisho';

- floating point can't be assigned as keys in associative array. The array ignores the floating point part and 
  deals with it as int;

- foreach($array_name as value) >> loops through the values of the array
  foreach($array_name as $key => $value) >> loops through the keys and values of the associative array.

- To loop through rows of a database, We can use a nested foreach loop :
    Example : foreach($b as $key => $row)
              {
                echo $key . "<br>";            
                foreach($row as $field => $value)
                {
                  echo $field . '---->' . $value . '<br>';
                }
                echo '----------------------------------------<br>';
              }

- extract($array, $mode, $prefix) >> it turns the key value pairs in the associative array to a variables and 
  values in the current script.
    * EXTR_OVERWRITE   >> If there is a collision, overwrite the existing variable. 
    * EXTR_SKIP        >> If there is a collision, don't overwrite the existing variable.
    * EXTR_PREFIX_ALL  >> Prefix all variable names with prefix.
    * EXTR_PREFIX_SAME >> If there is a collision, prefix the variable name with prefix.

- compact($array_of_strings = 'str1','str2'....); returns an associative array with pairs of keys from the 
  variable name from the string inputted and a value from the corresponding variable value.
  It is usually used for debugging a script
  Example : $arr = compact(explode(' ', 'var1 var2 var3'));

- count($array, $mode = 0) >> counts the elements of an array 
    * $mode = 0 or COUNT_NORMAL >> counts only the first  level of the array.
    * $mode = 1 or COUNT_RECURSIVE >> counts recursively all the elements of the arrays in the indexes of the 
                                      main array

- array_reverse($array); >> returns a reversed array.

- Adding elements to the array 
    # array_push($array, $item1, ...) >> adding item to the end of the array.
    # array_unshift($array, $item1, ...); >> adding item to the top of the array.

- Removing elements from the array 
    # array_pop($array, $item1, ...) >> removing item from the end of the array.
    # array_popshift($array, $item1, ...); >> removing item from the top of the array.

- sort($array, $sort_type) , rsort($array, $sort_type) "Reversed Sort" >> 
    * SORT_REGULAR - compare items normally >> doesn't change types of data (orders string fistly then int).
    * SORT_STRING - compare items as strings >> changes the whole array to strings then orders it.

- asort($array, $sort_type),rasort($array, $sort_type) >> sorts associative array values normally and reversed 
  ksort($array, $sort_type),rksort($array, $sort_type) >> sorts associative array keys normally and reversed

- Array searching methods: 
    # in_array($item, $array) >> returns true if the item is in the array, false if not.
    # array_search($item, $array) >> returns the index of the item in the array if exists, else returns false.
    # array_key_exists($key, $array) >> returns true if the key exists in the array, false if not.

- shuffle($array); >> shuffles the array inputted.

- array_fill($start, $number, $value); >> returns an array filled with the value repeated from the start 
  position and repeated $number times.

- array_sum($array); >> returns the sum of the values in the array "ignores strings".

- array_rand($array, $num = 1) >> returns an array of $number random keys from the main array. If $num = 1 it  
  will return only int not an array.

- array_unique($array); >> returns the main array without repeated elements.

- reset($array) >> returns the first element of that array.
  end($array)   >> returns the last element of that array.


============================================================================================================

                                    -----------------------------
                                    <<<<<<<    Strings    >>>>>>>
                                    -----------------------------

- explode($delimite, $array, [$limit]) >> it splits the string about the delimiter and returned it to an array
  * if limit > 0, it will split the string to maximum indecies of that limit.
  * if limit < 0, it will split the string ignoring the limit number inputted from the end of the array

- join() = implode($delimiter, $array) >> the opposite of explode .. It returns a string from concatanating 
  all the elements in the array seperated by the delimiter inputted.

- str_split($str, $length = 1); >> splits the string to chunks of length chars and put them in an array.

- chunk_split($str, $length, $delimiter = '\n'); >> returns the string with the $delimiter between every   
  $length characters of it.

- str_replace($replaced_string_array, $replace_with, $str, $count); works on strings and the values of an array
    # If $replaced was array and $replace_with was a string it will search for all the strings in the array 
      and replace it with the string.
    # If $replaced was array and $replace_with was an array it will replace each value of the first array with 
      the corresponding value in the second array "If the second array was smaller than the first, the values 
      that have no corresponding replaces will be replaced with empty strings" 
  Example : changing the '\n' to '<br>' in html forms to be viewd in the page as a new line.
            $str = str_replace('/n', '<br>', $str);

- str_repeat($str, $num) >> returns a string with value $str repeated $num times.

- str_shuffle($str) >> returns the string $str shuffled

- strlen($str) >> returns the string length

- strtolower(), strtoupper() >> returns the string in lower case or upper case

- ucfirst() >> upper case first, lcfirst() >> lower case first

- ucwords() >> returns the string with all its words upper case.

- addslashes($str) >> escape all quotes and slashes from the string.

- stripslashes($str); >> remove all slashes before charachters escaped in the string.

- strip_tags($str, $allowed_tags :: "<br><a><b> and so on");  >> remove all html and xml tags from the string.

- trim($str, $charlist = '\n\t \0'), ltrim(), rtrim() >> it returns the string with its beginning and end 
  stripped with $charlist
  example : $str = trim($str, 'BASHIK') >> it will search in the two endings with this chars and remove them 
  one by one.

- parse_str($str,[$array]); >> parses the link and returns all key value pairs in it as a variable or in an 
  array if inputted.
  Example : parse_str("name=Bisho&age=19&gender=male", $array) >> makes $array associative array that have 
  key : name with value Bisho .. ,etc

- nl2br($str, [XHTML = true]); >> returns a string with all new lines converted to breaks.

============================================================================================================

                              --------------------------------------------
                              <<<<<<<    What 's the difference    >>>>>>>
                              --------------------------------------------

- Difference between echo and print   
    # They are both php constructs and doesn't need parentheses
    # print can have many arguments not like echo.
    # print have a return value so it's little slower than echo
    # echo can't used in more complex expressions like $b ? print 'TRUE' : print 'FALSE'

- Difference between require and include:
    # including file with require stops the whole script if the file doesn't exist, require_once includes the 
      file just once.
    # including file with include doesn't stop the script if the file doesn't exist and just shows a warning 
      that the file doesn't exist, include_once includes the file just once.

- Difference between single and double quoted strings 
    # Single quotes >> The interpreter doesn't try to evaluate the variables in it like 
      'Hi His is $Dollar' >>> Hi His is $Dollar
    # Double quotes >> The interpreter tries to evaluate the variables in it like 
      'Hi His is $Dollar' >>> No variable called $Dollar (Assuming that no variable $Dollar declared)

- Difference between 'and' and && 
    # and >> has lower precedence than equal operator '='
      example : $a = true and false >> ($a = true) and false .... so $a equals true and that is wrong.
    # &&  >> best practice to use it because it has higher precedence than equal operator. It doesn's cause 
      any problem with using assignment and logical operators.

============================================================================================================



- htmlentities() function that escapes all html dangerous characters that passed to it.

- Ternary operator ? is used like if statement with vaiable assignment
  Example : $x = $x > $new ? $x : $new; >> This checks for the condition ($x > $new) and assign variable $x based on this condition.




- rand(from, to) >> getting random value from the range inputted.



- phpversion() >> shows the php version of your current server.

- phpinfo() >> shows info about your server, php version, server configs and more. It 's usually disabled in 
  the production stage.      





- list() is used to assign a list of variables in one operation and it only works on numerical arrays.
  Example : list($drink, $color, $power) = $info;
            echo "$drink is $color and $power makes it special.\n"; >> coffee is brown and caffeine makes it 
            special1


============================================================================================================

                                      -------------------------------
                                      <<<<<<<    Debugging    >>>>>>>
                                      -------------------------------

- var_dump(A no-value-returning-function) >> NULL

- We musn't include any file twice or more, It will cause an error because we will declare the variables and 
  the functions in the main script more than one time. 

- Don't nest multi line comments

- print_r() >> prints any type of arrays in a human readable format. It is usually used within <pre></pre> to 
  be printed in the write way in html. 

=============================================================================================================

                                  ----------------------------------------
                                  <<<<<<<    Working with files    >>>>>>>
                                  ----------------------------------------

- __DIR__ 's value is the current directory of the current script.

- __FILE__ 's value is the full file name of the current script.

- file_exists($file) >> reutrns true if the file exists, false if not.

- is_writable($file) >> reutrns true if the file is writable, false if not.

- mkdir($dir) >> making a directory named $dir.

- rmdir($dir) >> removing dir named $dir.

- is_dir($dir) >> returns true if the dir exists, false if not.

- dirname($path) >> returns the path of the directory your file are in. 
  Example : dirname(__FILE__) == __DIR__
            dirname(/opt/lampp/htdocs/first_task) == '/opt/lampp/htdocs'

- basename($path, $suffix) >> takes the path of the whole file and returns the file name only .. if extention 
  of the file was inputted it will remove the extention from the returned name.
  Example : basename(/opt/lampp/htdocs/first_task) == 'first_task'

- chmod($file, $permissions) >> modified the permisstions of the file as you changes it with linux command 
  line. 

- file_put_contents($file_path, $data, $mode) >> puts the $data in the file. If not existes it will be created.
  Mode :
    # FILE_APPEND >> don't remove the previous file contents.
    # LOCK_EX >> to prevent anyone else writing to the file at the same time.

- file_get_content($path/to/file, $include_path, context, offset, length) >> returns the contents of the file 
  as a string and can return a specific length from a specific offset.

- copy($original_file, $target_file);

- rename($original_file, $target_file); >> can be treated as move.

- pathinfo($path); >> returns an array contains dirname, basename, extentsion, filename.

- unlink($file_name); >> removes the file.

- rmdir($directory); >> removes the directory .. must be empty.

- 


=============================================================================================================

                                      -----------------------------
                                      <<<<<<<    Filters    >>>>>>>
                                      -----------------------------

- filter_list() >> returns an array have all filters possible in php.

=============================================================================================================

                                      ----------------------------
                                      <<<<<<<    MySQLi    >>>>>>>
                                      ----------------------------

- $conn = new mysqli($hn, $un, $ps, $db);
  if($conn->connect_error) die($conn->connect_error);  >> Connecting to the DB.

- $results = $conn->query(); >> returns a result object based on this query.

- $results_array = $results->fetch_all(MODE); >> returns the results as an array
    # Mode can be MYSQLI_ASSOC >> returns associative array.
    # Mode can be MYSQLI_NUM >> reyurns numeric array.

- $conn->insert_id >> if you want to know the id of the row you have just inserted.
  ==> I think it differs from one php version to another ... maybe $result->insert_id

- $results->close(), $conn->close() >> closes the conn and the results object.


=============================================================================================================

                                      ------------------------------
                                      <<<<<<<    Security    >>>>>>>
                                      ------------------------------

- Sanitizing inputs >>
  # $string = strip_slashes($string); , $conn->real_escape_string($string);

- OR using Placeholders
  # $statement = $conn->prepare("INSERT INTO books VALUES(?,?,?,?,?)");
    $statement->bind_param('isisi', $isbn, $name, $year, $author, $category) ;
    
    /// i --> integer, s --> string, d --> double, b --> blob :: This is added in the first parameter of bind
    
    $isdb = 123; $name = 'bisho' .......;
    $statement->excute(); // Finished Excuting statement.

- Protecting from XSS 'Cross Site Scripting' >> must be used when making user add things to be viewed
  # htmlentities($string);

- register_globals >> functionality in PHP that takes the variables in $_POST and $_GET and put them directly in 
                      PHP variables ... Must be disables because any one can but GET attribute in the link to 
                      override your script variables if not initialized " http://website.com/?override=value "

                      

=============================================================================================================
